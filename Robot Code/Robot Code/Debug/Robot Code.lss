
Robot Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000202  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002cd  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e7  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000245  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000008c  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000202  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007e  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_16>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <avr/interrupt.h>
#include "motor.h"

int main(void){
	
	init_motor();
  a4:	0e 94 6e 00 	call	0xdc	; 0xdc <init_motor>
	sei();
  a8:	78 94       	sei
	
	while(1){
		move(FORWARD);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	90 ee       	ldi	r25, 0xE0	; 224
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x14>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x1e>
  c2:	00 00       	nop
		_delay_ms(5000);
		stop_motor();
  c4:	0e 94 86 00 	call	0x10c	; 0x10c <stop_motor>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	90 ee       	ldi	r25, 0xE0	; 224
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x2a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x34>
  d8:	00 00       	nop
  da:	e7 cf       	rjmp	.-50     	; 0xaa <main+0x6>

000000dc <init_motor>:
#include <avr/interrupt.h>

volatile int direction;

void init_motor(){
	DDRB |= 0x0f; //enable output PB0-PB4
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x0f; //set all pins high
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	8f 60       	ori	r24, 0x0F	; 15
  e6:	85 b9       	out	0x05, r24	; 5
	TCCR0A |= (1<<WGM01);
  e8:	84 b5       	in	r24, 0x24	; 36
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	84 bd       	out	0x24, r24	; 36
	OCR0A = 24;				//output compare
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	87 bd       	out	0x27, r24	; 39
	TCCR0B = (1<<CS02);		//prescaler.
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	08 95       	ret

000000f8 <move>:
	return;
}

void move(int direct){
	direction = direct;
  f8:	90 93 01 01 	sts	0x0101, r25
  fc:	80 93 00 01 	sts	0x0100, r24
	TIMSK0 |= (1<<OCIE0A); //set timer mask to enable OC interrupts.
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <stop_motor>:
}

void stop_motor(){
	TIMSK0 &= ~(1<<OCIE0A); //Turn off OC interrupts.
 10c:	ee e6       	ldi	r30, 0x6E	; 110
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	8d 7f       	andi	r24, 0xFD	; 253
 114:	80 83       	st	Z, r24
	PORTB |= 0xf;	// Set all pins high.
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	08 95       	ret

0000011e <__vector_16>:
}

ISR(TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	if((PORTB & 0x0F) == 0x0f){ //if all pins are high
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	8f 30       	cpi	r24, 0x0F	; 15
 132:	09 f5       	brne	.+66     	; 0x176 <__vector_16+0x58>
		switch(direction){
 134:	80 91 00 01 	lds	r24, 0x0100
 138:	90 91 01 01 	lds	r25, 0x0101
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	71 f0       	breq	.+28     	; 0x15e <__vector_16+0x40>
 142:	1c f4       	brge	.+6      	; 0x14a <__vector_16+0x2c>
 144:	89 2b       	or	r24, r25
 146:	39 f0       	breq	.+14     	; 0x156 <__vector_16+0x38>
 148:	19 c0       	rjmp	.+50     	; 0x17c <__vector_16+0x5e>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	91 05       	cpc	r25, r1
 14e:	59 f0       	breq	.+22     	; 0x166 <__vector_16+0x48>
 150:	03 97       	sbiw	r24, 0x03	; 3
 152:	69 f0       	breq	.+26     	; 0x16e <__vector_16+0x50>
 154:	13 c0       	rjmp	.+38     	; 0x17c <__vector_16+0x5e>
			case FORWARD:
			PORTB &= ~0xf; // 11 11
 156:	85 b1       	in	r24, 0x05	; 5
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	85 b9       	out	0x05, r24	; 5
			break;
 15c:	0f c0       	rjmp	.+30     	; 0x17c <__vector_16+0x5e>
			case REVERSE:
			PORTB &= ~0xa; // 10 10
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	85 7f       	andi	r24, 0xF5	; 245
 162:	85 b9       	out	0x05, r24	; 5
			break;
 164:	0b c0       	rjmp	.+22     	; 0x17c <__vector_16+0x5e>
			case LEFT:
			PORTB &= ~0xb; // 10 11
 166:	85 b1       	in	r24, 0x05	; 5
 168:	84 7f       	andi	r24, 0xF4	; 244
 16a:	85 b9       	out	0x05, r24	; 5
			break;
 16c:	07 c0       	rjmp	.+14     	; 0x17c <__vector_16+0x5e>
			case RIGHT:
			PORTB &= ~0xe; // 11 10
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	81 7f       	andi	r24, 0xF1	; 241
 172:	85 b9       	out	0x05, r24	; 5
			break;
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_16+0x5e>
		}
		} else {
		PORTB |= 0x0f; //set all pins high
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8f 60       	ori	r24, 0x0F	; 15
 17a:	85 b9       	out	0x05, r24	; 5
	}
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
